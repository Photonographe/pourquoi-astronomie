---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import SearchBar from '../components/SearchBar.astro';
import QuestionItem from '../components/QuestionItem.astro';
import Footer from '../components/Footer.astro';
import { getAllQuestions, searchQuestions } from '../data/questions.ts';

const url = Astro.url;
const searchQuery = url.searchParams.get('q') || '';
const allQuestions = getAllQuestions();
const searchResults = searchQuery ? searchQuestions(searchQuery) : [];
---

<Layout 
  title={searchQuery ? `Recherche : ${searchQuery}` : "Recherche"}
  description={searchQuery ? `R√©sultats de recherche pour "${searchQuery}" - Questions d'astronomie pour enfants` : "Recherche dans toutes nos questions d'astronomie pour enfants"}
>
  <Header />
  
  <main class="search-page">
    <!-- Hero Section -->
    <section class="search-hero">
      <div class="container">
        <h1 class="page-title">
          {searchQuery ? `R√©sultats pour "${searchQuery}"` : "Recherche"}
        </h1>
        <p class="page-subtitle">
          {searchQuery 
            ? `${searchResults.length} r√©sultat${searchResults.length > 1 ? 's' : ''} trouv√©${searchResults.length > 1 ? 's' : ''}`
            : "Trouve la r√©ponse √† toutes tes questions sur l'astronomie"
          }
        </p>
        
        <SearchBar initialValue={searchQuery} />
      </div>
    </section>
    
    <!-- Search Results -->
    {searchQuery && (
      <section class="search-results">
        <div class="container">
          {searchResults.length > 0 ? (
            <div class="results-container">
              <div class="results-header">
                <h2>R√©sultats de recherche</h2>
                <p class="results-count">
                  {searchResults.length} question{searchResults.length > 1 ? 's' : ''} trouv√©e{searchResults.length > 1 ? 's' : ''}
                </p>
              </div>
              
              <div class="results-grid">
                {searchResults.map((question, index) => (
                  <QuestionItem question={question} index={index} />
                ))}
              </div>
            </div>
          ) : (
            <div class="no-results">
              <div class="no-results-icon">üîç</div>
              <h2>Aucun r√©sultat trouv√©</h2>
              <p>D√©sol√©, nous n'avons pas trouv√© de r√©ponse pour "<strong>{searchQuery}</strong>".</p>
              <div class="suggestions">
                <h3>Quelques suggestions :</h3>
                <ul>
                  <li>V√©rifie l'orthographe de ta recherche</li>
                  <li>Essaie avec des mots plus simples</li>
                  <li>Utilise des termes g√©n√©raux comme "plan√®te", "√©toile", "espace"</li>
                </ul>
              </div>
              <a href="/" class="btn btn-primary">Retour √† l'accueil</a>
            </div>
          )}
        </div>
      </section>
    )}
    
    <!-- Browse All Questions -->
    {!searchQuery && (
      <section class="all-questions">
        <div class="container">
          <h2 class="section-title">Toutes nos questions</h2>
          <p class="section-subtitle">
            Parcours toutes les questions et d√©couvre les myst√®res de l'univers !
          </p>
          
          <div class="questions-stats">
            <div class="stat">
              <span class="stat-number">{allQuestions.length}</span>
              <span class="stat-label">Questions au total</span>
            </div>
            <div class="stat">
              <span class="stat-number">6</span>
              <span class="stat-label">Cat√©gories</span>
            </div>
            <div class="stat">
              <span class="stat-number">100%</span>
              <span class="stat-label">Sources fiables</span>
            </div>
          </div>
          
          <div class="browse-categories">
            <h3>Parcourir par cat√©gorie</h3>
            <div class="category-links">
              <a href="/categories/terre-lune" class="category-link">üåç Terre & Lune</a>
              <a href="/categories/soleil-etoiles" class="category-link">‚òÄÔ∏è Soleil & √âtoiles</a>
              <a href="/categories/planetes" class="category-link">ü™ê Plan√®tes</a>
              <a href="/categories/exploration-spatiale" class="category-link">üöÄ Exploration</a>
              <a href="/categories/univers-galaxies" class="category-link">üåå Univers</a>
              <a href="/categories/astronautes" class="category-link">üë®‚ÄçüöÄ Astronautes</a>
            </div>
          </div>
          
          <div class="random-questions">
            <h3>Questions al√©atoires</h3>
            <div class="questions-grid">
              {allQuestions.slice(0, 6).map((question, index) => (
                <QuestionItem question={question} index={index} />
              ))}
            </div>
            <button class="btn btn-secondary" id="loadMoreQuestions">
              Voir plus de questions
            </button>
          </div>
        </div>
      </section>
    )}
    
    <!-- Search Tips -->
    <section class="search-tips">
      <div class="container">
        <h2>Conseils de recherche</h2>
        <div class="tips-grid">
          <div class="tip">
            <div class="tip-icon">üí°</div>
            <h3>Utilise des mots simples</h3>
            <p>Essaie "plan√®te" au lieu de "corps c√©leste"</p>
          </div>
          <div class="tip">
            <div class="tip-icon">üî§</div>
            <h3>V√©rifie l'orthographe</h3>
            <p>Assure-toi que tes mots sont bien √©crits</p>
          </div>
          <div class="tip">
            <div class="tip-icon">üéØ</div>
            <h3>Sois sp√©cifique</h3>
            <p>Ajoute des d√©tails : "pourquoi Mars rouge"</p>
          </div>
          <div class="tip">
            <div class="tip-icon">üìÇ</div>
            <h3>Explore les cat√©gories</h3>
            <p>Parcours nos 6 cat√©gories d'astronomie</p>
          </div>
        </div>
      </div>
    </section>
  </main>
  
  <Footer />
</Layout>

<style>
  .search-page {
    min-height: 80vh;
  }
  
  .search-hero {
    background: linear-gradient(135deg, #0f0c29, #24243e, #302b63);
    padding: var(--space-xl) 0;
    text-align: center;
  }
  
  .page-title {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: var(--color-primary);
  }
  
  .page-subtitle {
    font-size: 1.2rem;
    margin-bottom: 3rem;
    opacity: 0.9;
  }
  
  .search-results {
    padding: var(--space-lg) 0;
  }
  
  .results-header {
    margin-bottom: 2rem;
  }
  
  .results-header h2 {
    color: var(--color-primary);
    margin-bottom: 0.5rem;
  }
  
  .results-count {
    color: var(--color-text-muted);
    font-size: 1.1rem;
  }
  
  .results-grid {
    max-width: 800px;
    margin: 0 auto;
  }
  
  .no-results {
    text-align: center;
    padding: var(--space-xl) 0;
  }
  
  .no-results-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
    opacity: 0.5;
  }
  
  .no-results h2 {
    color: var(--color-primary);
    margin-bottom: 1rem;
  }
  
  .no-results p {
    font-size: 1.1rem;
    margin-bottom: 2rem;
    opacity: 0.8;
  }
  
  .suggestions {
    background: rgba(255, 255, 255, 0.05);
    border-radius: var(--radius);
    padding: 1.5rem;
    margin: 2rem auto;
    max-width: 500px;
    text-align: left;
  }
  
  .suggestions h3 {
    color: var(--color-secondary);
    margin-bottom: 1rem;
  }
  
  .suggestions ul {
    list-style: none;
    padding: 0;
  }
  
  .suggestions li {
    padding: 0.5rem 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .suggestions li:last-child {
    border-bottom: none;
  }
  
  .all-questions {
    padding: var(--space-xl) 0;
    background: rgba(0, 0, 0, 0.2);
  }
  
  .section-title {
    font-size: 2.5rem;
    text-align: center;
    margin-bottom: 1rem;
    color: var(--color-primary);
  }
  
  .section-subtitle {
    text-align: center;
    font-size: 1.1rem;
    opacity: 0.8;
    margin-bottom: 3rem;
  }
  
  .questions-stats {
    display: flex;
    justify-content: center;
    gap: 3rem;
    margin-bottom: 4rem;
  }
  
  .stat {
    text-align: center;
  }
  
  .stat-number {
    display: block;
    font-size: 2.5rem;
    font-weight: bold;
    color: var(--color-primary);
  }
  
  .stat-label {
    font-size: 0.9rem;
    opacity: 0.8;
  }
  
  .browse-categories {
    margin-bottom: 4rem;
  }
  
  .browse-categories h3 {
    text-align: center;
    color: var(--color-secondary);
    margin-bottom: 2rem;
  }
  
  .category-links {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .category-link {
    display: block;
    padding: 1rem;
    background: rgba(255, 255, 255, 0.1);
    border-radius: var(--radius);
    text-decoration: none;
    color: var(--color-text);
    transition: all 0.3s ease;
    text-align: center;
  }
  
  .category-link:hover {
    background: rgba(255, 215, 0, 0.2);
    transform: translateY(-5px);
  }
  
  .random-questions h3 {
    text-align: center;
    color: var(--color-secondary);
    margin-bottom: 2rem;
  }
  
  .questions-grid {
    max-width: 1000px;
    margin: 0 auto 2rem;
  }
  
  .search-tips {
    padding: var(--space-lg) 0;
    background: rgba(255, 255, 255, 0.05);
  }
  
  .search-tips h2 {
    text-align: center;
    color: var(--color-primary);
    margin-bottom: 3rem;
  }
  
  .tips-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
  }
  
  .tip {
    text-align: center;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: var(--radius);
  }
  
  .tip-icon {
    font-size: 2rem;
    margin-bottom: 1rem;
  }
  
  .tip h3 {
    color: var(--color-secondary);
    margin-bottom: 0.5rem;
  }
  
  .tip p {
    opacity: 0.8;
    font-size: 0.9rem;
  }
  
  @media (max-width: 768px) {
    .page-title {
      font-size: 2rem;
    }
    
    .questions-stats {
      gap: 1.5rem;
    }
    
    .category-links {
      grid-template-columns: 1fr 1fr;
    }
    
    .tips-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  import { getAllQuestions } from '../data/questions.ts';
  
  document.addEventListener('DOMContentLoaded', () => {
    const loadMoreBtn = document.getElementById('loadMoreQuestions');
    let currentIndex = 6;
    
    loadMoreBtn?.addEventListener('click', () => {
      const allQuestions = getAllQuestions();
      const questionsGrid = document.querySelector('.questions-grid');
      const nextQuestions = allQuestions.slice(currentIndex, currentIndex + 6);
      
      nextQuestions.forEach((question, index) => {
        const questionEl = document.createElement('div');
        questionEl.innerHTML = `<!-- Question component would be rendered here -->`;
        questionsGrid?.appendChild(questionEl);
      });
      
      currentIndex += 6;
      
      if (currentIndex >= allQuestions.length) {
        loadMoreBtn.style.display = 'none';
      }
    });
  });
</script>
