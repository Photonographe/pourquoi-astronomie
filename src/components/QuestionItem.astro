---
import type { Question } from '../data/questions.ts';

interface Props {
  question: Question;
  index?: number;
}

const { question, index = 0 } = Astro.props;
const delayClass = `delay-${index % 3}`;
---

<div class={`question-item ${delayClass}`} data-question-id={question.id}>
  <div class="question-header" role="button" tabindex="0" aria-expanded="false">
    <h3 class="question-text">{question.question}</h3>
    <span class="question-arrow" aria-hidden="true">ðŸ”½</span>
  </div>
  
  <div class="question-answer" aria-hidden="true">
    <div class="answer-content">
      <p class="answer-text">{question.reponse}</p>
      
      {question.funFact && (
        <div class="fun-fact">
          <span class="fun-fact-icon">ðŸ’«</span>
          <strong>Le savais-tu ?</strong>
          <p>{question.funFact}</p>
        </div>
      )}
      
      <div class="question-source">
        <strong>Source :</strong> {question.source}
      </div>
      
      <div class="question-tags">
        {question.tags.map(tag => (
          <span class="tag">#{tag}</span>
        ))}
      </div>
    </div>
  </div>
</div>

<style>
  .question-item {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    border-radius: var(--radius);
    margin-bottom: 1rem;
    overflow: hidden;
    transition: all 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.05);
  }
  
  .question-item:hover {
    background: rgba(255, 255, 255, 0.15);
    transform: translateX(5px);
  }
  
  .question-header {
    padding: 1.5rem;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: all 0.3s ease;
    position: relative;
  }
  
  .question-header:hover {
    background: rgba(255, 215, 0, 0.1);
  }
  
  .question-header:focus-visible {
    outline: 3px solid var(--color-primary);
    outline-offset: -3px;
  }
  
  .question-header[aria-expanded="true"] {
    background: rgba(255, 215, 0, 0.15);
  }
  
  .question-text {
    font-size: 1.2rem;
    font-weight: bold;
    color: var(--color-text);
    margin: 0;
    flex: 1;
    text-align: left;
  }
  
  .question-arrow {
    font-size: 1.2rem;
    transition: transform 0.3s ease;
    margin-left: 1rem;
    flex-shrink: 0;
  }
  
  .question-header[aria-expanded="true"] .question-arrow {
    transform: rotate(180deg);
  }
  
  .question-answer {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease;
  }
  
  .question-answer.active {
    max-height: 1000px;
  }
  
  .answer-content {
    padding: 0 1.5rem 1.5rem;
  }
  
  .answer-text {
    color: var(--color-text-muted);
    line-height: 1.8;
    font-size: 1.1rem;
    margin-bottom: 1.5rem;
  }
  
  .fun-fact {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: var(--radius-sm);
    padding: 1rem;
    margin: 1.5rem 0;
    border-left: 4px solid var(--color-primary);
    position: relative;
  }
  
  .fun-fact-icon {
    position: absolute;
    top: -0.5rem;
    left: -0.5rem;
    background: var(--color-primary);
    border-radius: 50%;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1rem;
  }
  
  .fun-fact strong {
    display: block;
    margin-bottom: 0.5rem;
    color: var(--color-primary);
  }
  
  .fun-fact p {
    margin: 0;
    line-height: 1.6;
  }
  
  .question-source {
    font-size: 0.9rem;
    color: var(--color-primary);
    font-style: italic;
    margin-bottom: 1rem;
    padding: 0.5rem;
    background: rgba(255, 215, 0, 0.1);
    border-radius: var(--radius-sm);
  }
  
  .question-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .tag {
    background: rgba(255, 255, 255, 0.1);
    color: var(--color-secondary);
    padding: 0.25rem 0.5rem;
    border-radius: var(--radius-sm);
    font-size: 0.8rem;
    border: 1px solid var(--color-secondary);
  }
  
  /* Animation delays */
  .delay-0 { animation-delay: 0s; }
  .delay-1 { animation-delay: 0.1s; }
  .delay-2 { animation-delay: 0.2s; }
  
  .question-item {
    animation: slideInLeft 0.6s ease-out forwards;
    opacity: 0;
    transform: translateX(-50px);
  }
  
  @keyframes slideInLeft {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  @media (max-width: 768px) {
    .question-header {
      padding: 1rem;
    }
    
    .question-text {
      font-size: 1.1rem;
    }
    
    .answer-content {
      padding: 0 1rem 1rem;
    }
    
    .answer-text {
      font-size: 1rem;
    }
  }
</style>

<script>
  class QuestionComponent {
    constructor() {
      this.setupEventListeners();
    }
    
    private setupEventListeners() {
      document.addEventListener('click', this.handleClick.bind(this));
      document.addEventListener('keydown', this.handleKeydown.bind(this));
    }
    
    private handleClick(e: Event) {
      const header = (e.target as HTMLElement).closest('.question-header');
      if (header) {
        this.toggleQuestion(header as HTMLElement);
      }
    }
    
    private handleKeydown(e: KeyboardEvent) {
      if (e.key === 'Enter' || e.key === ' ') {
        const header = (e.target as HTMLElement).closest('.question-header');
        if (header) {
          e.preventDefault();
          this.toggleQuestion(header as HTMLElement);
        }
      }
    }
    
    private toggleQuestion(header: HTMLElement) {
      const answer = header.nextElementSibling as HTMLElement;
      const arrow = header.querySelector('.question-arrow') as HTMLElement;
      const isExpanded = header.getAttribute('aria-expanded') === 'true';
      
      // Close all other questions first
      this.closeAllQuestions();
      
      if (!isExpanded) {
        // Open this question
        header.setAttribute('aria-expanded', 'true');
        answer.setAttribute('aria-hidden', 'false');
        answer.classList.add('active');
        
        // Scroll into view
        setTimeout(() => {
          header.scrollIntoView({
            behavior: 'smooth',
            block: 'nearest'
          });
        }, 100);
        
        // Track analytics
        this.trackQuestionOpen(header);
      }
    }
    
    private closeAllQuestions() {
      document.querySelectorAll('.question-header').forEach(header => {
        const answer = header.nextElementSibling as HTMLElement;
        
        header.setAttribute('aria-expanded', 'false');
        answer.setAttribute('aria-hidden', 'true');
        answer.classList.remove('active');
      });
    }
    
    private trackQuestionOpen(header: HTMLElement) {
      const questionItem = header.closest('.question-item') as HTMLElement;
      const questionId = questionItem?.getAttribute('data-question-id');
      
      if (questionId) {
        // Analytics tracking (Google Analytics, etc.)
        if (typeof gtag !== 'undefined') {
          gtag('event', 'question_opened', {
            'question_id': questionId,
            'custom_map': {'question_id': 'question_id'}
          });
        }
        
        // Console log for debugging
        console.log(`Question opened: ${questionId}`);
      }
    }
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new QuestionComponent();
  });
</script>
